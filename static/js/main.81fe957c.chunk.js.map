{"version":3,"sources":["utilities/api/getListingApi.js","actions/actions.js","components/SearchContainer/DebugInfo/DebugInfo.js","components/Genric/Button/Button.js","components/SearchContainer/SearchBar.js","components/SearchContainer/SearchBarContainer.js","components/SearchBody/Cards/Card.js","components/SearchBody/Cards/CardContainer.js","components/SearchBody/SearchBodyContainer.js","components/AnimeSearchContainer/AnimeSearchContainer.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["fetchSearchData","url","fetch","method","then","response","json","data","catch","err","console","log","getSearchData","query","oldUrl","dispatch","getState","a","page","disablePagination","oldQuery","oldData","searchData","consolidatedData","concat","results","setSearchData","setPageNo","setDebugData","debugInfo","setSearchQuery","type","payload","memo","request_cached","request_cache_expiry","className","rel","target","id","href","style","color","label","onClickHandler","customClass","disabled","onClick","SearchBar","onChangeHandler","performSearch","autoComplete","onSubmit","e","preventDefault","spellCheck","onChange","value","name","placeholder","SearchBarContainer","disableButton","useSelector","state","useDispatch","debugData","useState","queryString","setQueryString","Object","keys","length","imageUrl","stopPropagation","window","open","backgroundImage","process","loading","src","alt","cardList","map","card","key","image_url","title","SearchBodyContainer","last_page","AnimeSearchContainer","App","Boolean","location","hostname","match","initState","rootReducer","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"obAEaA,EAAkB,SAACC,GAU/B,OATcC,MAAMD,EAAK,CACxBE,OAAQ,QAEPC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACL,OAAOA,KAEPC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAI,WAAYF,OCN3BG,EAAgB,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,OAAV,8CAAuB,WAAOC,EAAUC,GAAjB,6BAAAC,EAAA,yDAC5ChB,EAAM,GACNiB,EAAK,GACLJ,EAH4C,wBAI5Cb,EAAMa,EAJsC,SAMxCC,EAASI,GAAkB,IAC3BT,QAAQC,IAAIK,KACNI,EAAWJ,IAAWH,MAC5BK,EAAQF,IAAWE,KACnBA,GAAc,EACdjB,EAAG,kDAA8CmB,EAA9C,0BAAwEF,GACrEG,EAAUL,IAAWM,WAZa,UAaftB,EAAgBC,GAbD,QAalCqB,EAbkC,OAclCC,EAAmBF,EAAQG,OAAOF,EAAWG,SACnDV,EAASW,EAAcH,IACvBR,EAASY,EAAUT,IACnBH,EAASI,GAAkB,IAjBa,kDAoBxCT,QAAQC,IAAI,SApB4B,uCAuB5CV,EAAG,kDAA8CY,EAA9C,0BAAqEK,GAvB5B,UAyBxCH,EAASa,EAAa,CAAC3B,IAAI,iBAC3Bc,EAASW,EAAc,KACvBX,EAASI,GAAkB,IA3Ba,UA4BfnB,EAAgBC,GA5BD,QA4BlCqB,EA5BkC,cA6BlCO,EA7BkC,eA6BjBP,IACNG,QACjBI,EAAU5B,IAAMA,EAChBc,EAASI,GAAkB,IAC3BJ,EAASW,EAAcJ,EAAWG,UAClCV,EAASa,EAAaC,IACtBd,EAASe,EAAejB,IAnCgB,mDAqCxCH,QAAQC,IAAI,SArC4B,kEAAvB,yDA2ChBe,EAAgB,SAAAnB,GAAI,MAAK,CAClCwB,KAAM,yBACNC,QAAQ,YAAKzB,KAIJqB,EAAe,SAAArB,GAAI,MAAK,CACjCwB,KAAM,wBACNC,QAAQ,eAAMzB,KAILuB,EAAiB,SAAAvB,GAAI,MAAK,CACnCwB,KAAM,mBACNC,QAASzB,IAIAY,EAAoB,SAAAZ,GAAI,MAAK,CACtCwB,KAAM,oBACNC,QAASzB,IAIAoB,EAAY,SAAApB,GAAI,MAAK,CAC9BwB,KAAM,kBACNC,QAAQzB,IC1DG0B,G,MAAAA,gBAXG,SAAC,GAAmB,IAAD,IAAhB1B,YAAgB,MAAT,GAAS,EAE7BN,EACAM,EADAN,IAAKiC,EACL3B,EADK2B,eAAgBC,EACrB5B,EADqB4B,qBAEzB,OACI,yBAAKC,UAAU,SAAf,eACgB,uBAAGC,IAAI,sBAAsBC,OAAO,SAASC,GAAG,mBAAmBC,KAAMvC,GAAMA,GAAQ,6BADvG,qBAEekC,GAAwB,0BAAMI,GAAG,iBAAiBE,MAAO,CAAEC,MAAOR,EAAiB,UAAY,YAAcA,EAAiB,OAAS,SAAgB,kCCC/JD,G,MAAAA,gBAPA,SAAC,GAA4D,IAAD,IAA1DU,aAA0D,MAApD,GAAoD,EAAjDC,EAAiD,EAAjDA,eAAgBC,EAAiC,EAAjCA,YAAiC,IAArBC,gBAAqB,SACvE,OACI,kBAAC,WAAD,KACI,4BAAQA,SAAUA,EAAUV,UAAWS,EAAaE,QAAS,kBAAMH,MAAoBD,QCQpFK,EAXG,SAAC,GAA8C,IAA7CF,EAA4C,EAA5CA,SAASG,EAAmC,EAAnCA,gBAAgBC,EAAmB,EAAnBA,cAEzC,OACI,kBAAC,WAAD,KACI,0BAAMC,aAAa,MAAMC,SAAU,SAACC,GAAKA,EAAEC,iBAAiBJ,MAC5D,2BAAOX,GAAG,eAAegB,WAAW,QAAQC,SAAU,SAACH,GAAD,OAAOJ,EAAgBI,EAAEf,OAAOmB,QAAQ1B,KAAK,OAAO2B,KAAK,QAAQC,YAAY,oCACnI,kBAAC,EAAD,CAAQb,SAAUA,EAAUF,eAAgB,kBAAI,MAAMC,YAAa,eAAgBF,MAAM,UCgCtFiB,EAjCY,WAEvB,IAAMC,EAAgBC,aAAa,SAAAC,GAAK,QAAEA,EAAM5C,mBAAkB4C,EAAM5C,qBAClEJ,EAAWiD,cAHY,EAOzBF,aAAY,SAAAC,GAAK,OAAEA,KADnBE,iBANyB,MAMf,GANe,IASSC,mBAAS,IATlB,mBAStBC,EATsB,KASTC,EATS,KAuB7B,OACI,yBAAKhC,UAAU,UACX,kBAAC,EAAD,CAAWU,SAAUe,EAAeZ,gBAdpB,SAACQ,GAGrBW,EAAeX,IAW4DP,cARzD,WAGlBnC,EAASH,EAAc,CAACC,MAAMsD,QAMzBE,OAAOC,KAAKL,GAAWM,OAAQ,GAC5B,kBAAC,EAAD,CAAWhE,KAAM0D,MCpBlBhC,G,MAAAA,gBAbF,SAAC,GAAkC,IAAD,IAAhChC,WAAgC,MAA5B,GAA4B,MAAzBuE,gBAAyB,MAAhB,GAAgB,MAAbd,YAAa,MAAR,GAAQ,EAE3C,OACQ,yBAAKX,QAAU,SAACM,GAAKA,EAAEoB,kBAAkBC,OAAOC,KAAK1E,EAAI,WAAYmC,UAAU,QACnE,yBAAKA,UAAU,eACX,yBAAKK,MAAO,CAACmC,gBAAgB,OAAD,OAAQC,oBAAR,uBAAqDC,QAAQ,OAAOC,IAAKP,EAAUQ,IAAKtB,KAExH,yBAAKtB,UAAU,cACX,6BAAK,8BAAOsB,UCQzBzB,kBAfO,SAAC,GAAuB,IAAD,IAApBgD,gBAAoB,MAAT,GAAS,EACzC,OACI,yBAAK7C,UAAU,SAGV6C,GAAYA,EAASV,OAAS,GAAKU,EAASC,KAAI,SAAAC,GAC7C,OAAIA,GAAQA,EAAKlF,IACL,kBAAC,EAAD,CAAMmF,IAAKD,EAAKlF,IAAKA,IAAKkF,EAAKlF,IAAKuE,SAAUW,EAAKE,UAAW3B,KAAMyB,EAAKG,QAE9E,YCwBRC,G,MA9Ba,WAExB,IAAMxE,EAAWiD,cACXiB,EAAWnB,aAAY,SAAAC,GAAK,OAAIA,EAAMzC,cAHd,EAMEwC,aAAY,SAAAC,GAAK,OAAIA,EAAME,UAAYF,EAAME,UAAY,MAN3D,IAMtBuB,iBANsB,MAMV,GANU,EAMNvF,EANM,EAMNA,IAClBiB,EAAO4C,aAAY,SAAAC,GAAK,OAAIA,EAAM7C,KAAO6C,EAAM7C,KAAO,KACtDC,EAAoB2C,aAAa,SAAAC,GAAK,QAAEA,EAAM5C,mBAAkB4C,EAAM5C,qBAO5E,OACI,kBAAC,WAAD,KACK8D,GAAYA,EAASV,OAAS,GAC3B,kBAAC,WAAD,KAAU,yBAAKnC,UAAU,SACrB,kBAAC,EAAD,CAAe6C,SAAUA,KAIxB/D,IAASsE,GAAa,kBAAC,EAAD,CAAQ1C,SAAU3B,EAAmByB,eAbvD,WACb1B,IAASsE,GACbzE,EAASH,EAAc,CAAEE,OAAQb,MAWqE4C,YAAa,aAAcF,MAAM,kBCXhI8C,EAXc,WAEzB,OACI,yBAAKrD,UAAU,aACX,yBAAKA,UAAU,aACX,kBAAC,EAAD,MACA,kBAAC,EAAD,SCDDsD,MARf,WACE,OACE,yBAAKtD,UAAU,OACb,kBAAC,EAAD,QCGcuD,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2D,WClBAC,EAAY,CACd7E,KAAM,GAoBK8E,EAjBK,WAAgC,IAA/BjC,EAA8B,uDAAtBgC,EAAWE,EAAW,uCACvClE,EAAkBkE,EAAlBlE,KAAMC,EAAYiE,EAAZjE,QACd,OAAQD,GACJ,IAAK,yBACD,OAAO,2BAAKgC,GAAZ,IAAmBzC,WAAYU,IACnC,IAAK,wBACD,OAAO,2BAAK+B,GAAZ,IAAmBE,UAAWjC,IAClC,IAAK,kBACD,OAAO,2BAAK+B,GAAZ,IAAmB7C,KAAMc,IAC7B,IAAK,mBACD,OAAO,2BAAK+B,GAAZ,IAAmBlD,MAAOmB,IAC9B,IAAK,oBACD,OAAO,2BAAK+B,GAAZ,IAAmB5C,kBAAmBa,IAC1C,QACI,OAAO+B,I,gBCRbmC,EAAQC,sBAAYH,EAAaI,8BAAoBC,0BAAgBC,OAE3EC,IAASC,OACP,kBAAC,IAAD,CAAUN,MAAOA,GACjB,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,QAGFC,SAASC,eAAe,SFiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1G,MAAK,SAAA2G,GACJA,EAAaC,gBAEdxG,OAAM,SAAAyG,GACLvG,QAAQuG,MAAMA,EAAMC,c","file":"static/js/main.81fe957c.chunk.js","sourcesContent":["\n// API to get search data from the Db ==>\nexport const fetchSearchData = (url) => {\n\tlet resData = fetch(url, {\n\t\tmethod: 'GET'\n\t})\n\t\t.then(response => response.json())\n\t\t.then(data => {\n\t\t\treturn data;\n\t\t})\n\t\t.catch(err => console.log('Fetcherr', err));\n\n\treturn resData;\n};","import { fetchSearchData } from \"../utilities/api/getListingApi\";\n\n// get Search Data from api using query or existing url ==>\n\nexport const getSearchData = ({ query, oldUrl }) => async (dispatch, getState) => {\n    let url = ''\n    let page=1\n    if (oldUrl) {\n        url = oldUrl\n        try {\n            dispatch(disablePagination(true));\n            console.log(getState())\n            const oldQuery = getState().query\n            page  = getState().page;\n            page = page + 1;\n            url = `https://api.jikan.moe/v3/search/anime?q=${oldQuery}&limit=16&page=${page}`;\n            const oldData = getState().searchData;\n            const searchData = await fetchSearchData(url)\n            const consolidatedData = oldData.concat(searchData.results)\n            dispatch(setSearchData(consolidatedData));\n            dispatch(setPageNo(page));\n            dispatch(disablePagination(false));\n    \n        } catch (e) {\n            console.log('error')\n        }\n    } else {\n        url = `https://api.jikan.moe/v3/search/anime?q=${query}&limit=16&page=${page}`;\n        try {\n            dispatch(setDebugData({url:'fetching...'}));\n            dispatch(setSearchData([]));\n            dispatch(disablePagination(true));\n            const searchData = await fetchSearchData(url, query, page)\n            const debugInfo = { ...searchData };\n            delete debugInfo.results;\n            debugInfo.url = url;\n            dispatch(disablePagination(false));\n            dispatch(setSearchData(searchData.results));\n            dispatch(setDebugData(debugInfo));\n            dispatch(setSearchQuery(query));\n        } catch (e) {\n            console.log('error')\n        }\n    }\n}\n\n// Action dispatcher for setting search result data =>\nexport const setSearchData = data => ({\n    type: 'SET_SEARCH_RESULT_DATA',\n    payload: [...data]\n});\n\n// Action dispatcher for setting search Debug data =>\nexport const setDebugData = data => ({\n    type: 'SET_SEARCH_DEBUG_DATA',\n    payload: { ...data }\n});\n\n// Action dispatcher for setting search Query=>\nexport const setSearchQuery = data => ({\n    type: 'SET_SEARCH_QUERY',\n    payload: data\n});\n\n// Action dispatcher for disabling Pagination Button =>\nexport const disablePagination = data => ({\n    type: 'TOGGLE_PAGINATION',\n    payload: data\n});\n\n// Action dispatcher for setting current page Number data =>\nexport const setPageNo = data => ({\n    type: 'SET_SEARCH_PAGE',\n    payload:data\n});","import React, { memo } from 'react'\nimport './DebugInfo.css'\n\n// Component that displayes the debug infor like URL and cached info ==>\nconst DebugInfo = ({ data = {} }) => {\n    const {\n        url, request_cached, request_cache_expiry\n    } = data;\n    return (\n        <div className=\"debug\">\n            Requesting: <a rel=\"noopener noreferrer\" target=\"_blank\" id=\"search_query_url\" href={url}>{url}</a><br />\n    Request Cached: {!!request_cache_expiry && <span id=\"request_cached\" style={{ color: request_cached ? '#5DAE28' : '#CE3C2D' }}>{request_cached ? 'True' : 'False'}</span>}<br />\n        </div>\n    )\n}\nexport default memo(DebugInfo);","import React, { Fragment, memo } from 'react'\nimport './Button.css'\n\n// Generic button component==>\n\nconst Button = ({label='',onClickHandler, customClass,disabled=false }) => {\n    return (\n        <Fragment>\n            <button disabled={disabled} className={customClass} onClick={() => onClickHandler()} >{label}</button>\n        </Fragment>\n    )\n}\nexport default memo(Button);","import React, { Fragment } from 'react'\nimport './SearchBarContainer.css'\nimport Button from '../Genric/Button/Button';\n\n// SearchBar Component with input and reused SearchButton component ==>\nconst SearchBar = ({disabled,onChangeHandler,performSearch}) => {\n\n    return (\n        <Fragment>\n            <form autoComplete=\"off\" onSubmit={(e)=>{e.preventDefault();performSearch()}} >\n            <input id=\"search_query\" spellCheck=\"false\" onChange={(e) => onChangeHandler(e.target.value)} type=\"text\" name=\"query\" placeholder=\"search for an anime, e.g Naruto\" />\n            <Button disabled={disabled} onClickHandler={()=>null} customClass={'searchButton'} label=\"Go\"/>\n            </form>\n        </Fragment>\n    )\n}\nexport default SearchBar;","import React, { useState } from 'react'\nimport './SearchBarContainer.css'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getSearchData } from '../../actions/actions';\nimport DebugInfo from './DebugInfo/DebugInfo';\nimport SearchBar from './SearchBar';\n\n\n// Search Bar Container Containg input field and debug info ==>\n\nconst SearchBarContainer = () => {\n\n    const disableButton = useSelector (state=>state.disablePagination?state.disablePagination:false)\n    const dispatch = useDispatch();\n    // get debug dtata from store ===> \n    const {\n        debugData={},\n    } = useSelector(state=>state);\n\n    const [queryString, setQueryString] = useState('');\n\n    const onChangeHandler = (value) => {\n\n        // set the state of user input==>\n        setQueryString(value)\n    }\n\n    const performSearch = () => {\n\n        // hit search API with user input ==>\n        dispatch(getSearchData({query:queryString}))\n    }\n    // Debug info appears only when the API provides it ==>\n    return (\n        <div className='search'>\n            <SearchBar disabled={disableButton} onChangeHandler ={onChangeHandler} performSearch ={performSearch} />\n            {Object.keys(debugData).length >0 && \n                <DebugInfo data={debugData} />\n            }\n\n        </div>\n    )\n}\nexport default SearchBarContainer;","import React, { memo } from 'react'\nimport './Cards.css'\n\n// Individual card component  with image name and url ==>\nconst Card = ({url='',imageUrl='',name=''}) => {\n    \n    return (\n            <div onClick ={(e)=>{e.stopPropagation();window.open(url,'_blank')}} className=\"card\">\n                        <div className=\"card__image\">\n                            <img style={{backgroundImage:`url(${process.env.PUBLIC_URL}/images/tenor.gif)`}} loading=\"lazy\" src={imageUrl} alt={name} />\n                        </div>\n                        <div className=\"card__name\">\n                            <div><span>{name}</span></div> \n                        </div>\n                    </div>\n    )\n}\nexport default memo(Card);","import React, { memo } from 'react'\nimport './Cards.css'\nimport Card from './Card'\n\n// Component containing all the cards==>\nconst CardContainer = ({ cardList = [] }) => {\n    return (\n        <div className=\"cards\" >\n\n            {/* iterating the reult list and rendering them into individual cards ==> */}\n            {cardList && cardList.length > 0 && cardList.map(card => {\n                if (card && card.url)\n                    return (<Card key={card.url} url={card.url} imageUrl={card.image_url} name={card.title} />\n                    )\n                return null\n            })\n            }\n        </div>\n    )\n}\nexport default memo(CardContainer);","import React, { Fragment } from 'react'\nimport CardContainer from './Cards/CardContainer'\nimport './SearchBodyContainer.css'\nimport { useSelector, useDispatch } from 'react-redux'\nimport Button from '../Genric/Button/Button'\nimport {  getSearchData } from '../../actions/actions'\n\n// Body container Component =>\nconst SearchBodyContainer = () => {\n\n    const dispatch = useDispatch();\n    const cardList = useSelector(state => state.searchData);\n\n    // get last Page of search and url from the store ==>\n    const { last_page = '', url } = useSelector(state => state.debugData ? state.debugData : {});\n    const page = useSelector(state => state.page ? state.page : 1);\n    const disablePagination = useSelector (state=>state.disablePagination?state.disablePagination:false)\n    // function to add more cards on clicking view more if not the last page ===>\n    const addMoreCards = () => {\n        if (page !== last_page)\n        dispatch(getSearchData({ oldUrl: url }))\n\n    }\n    return (\n        <Fragment>\n            {cardList && cardList.length > 0 &&\n                <Fragment><div className='cards'>\n                    <CardContainer cardList={cardList} />\n                </div>\n\n                {/* show view more button only when not the last page of the list ==> */}\n                    {page !== last_page && <Button disabled={disablePagination} onClickHandler={addMoreCards} customClass={'transWhite'} label='View More' />\n                    }\n                </Fragment>\n            }\n        </Fragment>\n    )\n}\nexport default SearchBodyContainer;","import React from 'react'\nimport './AnimeSearchContainer.css'\nimport SearchBarContainer from '../SearchContainer/SearchBarContainer'\nimport SearchBodyContainer from '../SearchBody/SearchBodyContainer'\n\n// Container component that containes Search bar and Body==>\n\n// kept body container within searchBar calls so that it stays intct in that width==>\n\nconst AnimeSearchContainer = () => {\n\n    return (\n        <div className='container'>\n            <div className='searchBar'>\n                <SearchBarContainer />\n                <SearchBodyContainer />\n            </div>\n        </div>\n    )\n}\nexport default AnimeSearchContainer;","import React from 'react';\nimport './App.css';\nimport AnimeSearchContainer from './components/AnimeSearchContainer/AnimeSearchContainer';\n\n// Root Component ===>\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AnimeSearchContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState = {\n    page: 1,\n}\n// Root Reducer for the application ==>\nconst rootReducer = (state = initState, action) => {\n    const { type, payload } = action;\n    switch (type) {\n        case 'SET_SEARCH_RESULT_DATA':\n            return { ...state, searchData: payload };\n        case 'SET_SEARCH_DEBUG_DATA':\n            return { ...state, debugData: payload };\n        case 'SET_SEARCH_PAGE':\n            return { ...state, page: payload };\n        case 'SET_SEARCH_QUERY':\n            return { ...state, query: payload };\n        case 'TOGGLE_PAGINATION':\n            return { ...state, disablePagination: payload };\n        default:\n            return state;\n    }\n}\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers/rootReducer';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <Provider store={store} >\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}