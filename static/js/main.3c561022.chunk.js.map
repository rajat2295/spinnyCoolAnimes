{"version":3,"sources":["utilities/api/getListingApi.js","actions/actions.js","components/SearchContainer/DebugInfo/DebugInfo.js","components/Genric/Button/Button.js","components/SearchContainer/SearchBar.js","components/SearchContainer/SearchBarContainer.js","components/SearchBody/Cards/Card.js","components/SearchBody/Cards/CardContainer.js","components/SearchBody/SearchBodyContainer.js","components/AnimeSearchContainer/AnimeSearchContainer.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["fetchSearchData","url","resData","fetch","method","then","response","json","data","catch","err","console","log","getSearchData","query","oldUrl","dispatch","getState","a","page","oldData","searchData","consolidatedData","concat","results","setSearchData","debugInfo","setDebugData","type","payload","memo","request_cached","className","target","id","href","style","color","label","onClickHandler","customClass","onClick","SearchBar","onChangeHandler","performSearch","autocomplete","onSubmit","e","preventDefault","spellcheck","onChange","value","name","placeholder","SearchBarContainer","useDispatch","useSelector","state","debugData","useState","queryString","setQueryString","Object","keys","length","imageUrl","loading","src","alt","cardList","map","card","image_url","title","SearchBodyContainer","last_page","Number","AnimeSearchContainer","App","Boolean","window","location","hostname","match","initState","rootReducer","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.3c561022.chunk.js","sourcesContent":["\n// API to get search data from the Db ==>\nexport const fetchSearchData = (url,query='',page='1') => {\n\tlet resData = fetch(url, {\n\t\tmethod: 'GET'\n\t})\n\t\t.then(response => response.json())\n\t\t.then(data => {\n\t\t\treturn data;\n\t\t})\n\t\t.catch(err => console.log('Fetcherr', err));\n\n\treturn resData;\n};","import { fetchSearchData } from \"../utilities/api/getListingApi\";\n\n// get Search Data from api using query or existing url ==>\n\nexport const getSearchData = ({ query, oldUrl }) => async (dispatch, getState) => {\n    let url = ''\n    let page=1\n    if (oldUrl) {\n        url = oldUrl\n        try {\n             page  = getState().page;\n            const oldData = getState().searchData;\n            const searchData = await fetchSearchData(url, query, page)\n            const consolidatedData = oldData.concat(searchData.results)\n            dispatch(setSearchData(consolidatedData));\n    \n        } catch (e) {\n            console.log('error')\n        }\n    } else {\n        url = `https://api.jikan.moe/v3/search/anime?q=${query}&limit=16&page=${page}`;\n        try {\n            const searchData = await fetchSearchData(url, query, page)\n            const debugInfo = { ...searchData };\n            delete debugInfo.results;\n            debugInfo.url = url;\n            dispatch(setSearchData(searchData.results));\n            dispatch(setDebugData(debugInfo));\n    \n        } catch (e) {\n            console.log('error')\n        }\n    }\n}\n\n// Action dispatcher for setting search result data =>\nexport const setSearchData = data => ({\n    type: 'SET_SEARCH_RESULT_DATA',\n    payload: [...data]\n});\n\n// Action dispatcher for setting search Debug data =>\nexport const setDebugData = data => ({\n    type: 'SET_SEARCH_DEBUG_DATA',\n    payload: { ...data }\n});\n\n// Action dispatcher for setting current page Number data =>\nexport const setPageNo = data => ({\n    type: 'SET_SEARCH_PAGE',\n    payload: { ...data }\n});","import React, { memo } from 'react'\nimport './DebugInfo.css'\n\n// Component that displayes the debug infor like URL and cached info ==>\nconst DebugInfo = ({ data = {} }) => {\n    const {\n        url, request_cached\n    } = data;\n    return (\n        <div className=\"debug\">\n            Requesting: <a target=\"_blank\" id=\"search_query_url\" href=\"javascript:void(null)\">{url}</a><br />\n    Request Cached: <span id=\"request_cached\" style={{ color: request_cached ? '#5DAE28' : '#CE3C2D' }}>{request_cached ? 'True' : 'False'}</span><br />\n        </div>\n    )\n}\nexport default memo(DebugInfo);","import React, { Fragment, memo } from 'react'\nimport './Button.css'\n\n// Generic button component==>\n\nconst Button = ({label='',onClickHandler, customClass }) => {\n    return (\n        <Fragment>\n            <button className={customClass} onClick={() => onClickHandler()} >{label}</button>\n        </Fragment>\n    )\n}\nexport default memo(Button);","import React, { Fragment } from 'react'\nimport './SearchBarContainer.css'\nimport Button from '../Genric/Button/Button';\n\n// SearchBar Component with input and reused SearchButton component ==>\nconst SearchBar = ({onChangeHandler,performSearch}) => {\n\n    return (\n        <Fragment>\n            <form autocomplete=\"off\" onSubmit={(e)=>{e.preventDefault();performSearch()}} >\n            <input id=\"search_query\" spellcheck=\"false\" onChange={(e) => onChangeHandler(e.target.value)} type=\"text\" name=\"query\" placeholder=\"search for an anime, e.g Naruto\" />\n            <Button onClickHandler={performSearch} customClass={'searchButton'} label=\"Go\"/>\n            </form>\n        </Fragment>\n    )\n}\nexport default SearchBar;","import React, { useState } from 'react'\nimport './SearchBarContainer.css'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getSearchData } from '../../actions/actions';\nimport DebugInfo from './DebugInfo/DebugInfo';\nimport SearchBar from './SearchBar';\n\n\n// Search Bar Container Containg input field and debug info ==>\n\nconst SearchBarContainer = () => {\n    \n    const dispatch = useDispatch();\n    // get debug dtata from store ===> \n    const {\n        debugData={},\n    } = useSelector(state=>state);\n\n    const [queryString, setQueryString] = useState('');\n\n    const onChangeHandler = (value) => {\n\n        // set the state of user input==>\n        setQueryString(value)\n    }\n\n    const performSearch = () => {\n\n        // hit search API with user input ==>\n        dispatch(getSearchData({query:queryString}))\n    }\n    // Debug info appears only when the API provides it ==>\n    return (\n        <div className='search'>\n            <SearchBar onChangeHandler ={onChangeHandler} performSearch ={performSearch} />\n            {Object.keys(debugData).length >0 && \n                <DebugInfo data={debugData} />\n            }\n\n        </div>\n    )\n}\nexport default SearchBarContainer;","import React, { memo } from 'react'\nimport './Cards.css'\n\n// Individual card component  with image name and url ==>\nconst Card = ({url='',imageUrl='',name=''}) => {\n    \n    return (\n            <div href={url} className=\"card\">\n                        <div className=\"card__image\">\n                            <img loading=\"lazy\" src={imageUrl} alt={name} />\n                        </div>\n                        <div className=\"card__name\">\n                            <div><span>{name}</span></div> \n                        </div>\n                    </div>\n    )\n}\nexport default memo(Card);","import React, { memo } from 'react'\nimport './Cards.css'\nimport Card from './Card'\n\n// Component containing all the cards==>\nconst CardContainer = ({cardList=[]}) => {\n    return (\n        <div className=\"cards\" >\n            \n            {/* iterating the reult list and rendering them into individual cards ==> */}\n            {cardList.map(card=>(\n                <Card url={card.url} imageUrl={card.image_url} name={card.title} />\n            ))\n}\n    </div>\n    )\n}\nexport default memo(CardContainer);","import React, { Fragment } from 'react'\nimport CardContainer from './Cards/CardContainer'\nimport './SearchBodyContainer.css'\nimport { useSelector, useDispatch } from 'react-redux'\nimport Button from '../Genric/Button/Button'\nimport { setPageNo, getSearchData } from '../../actions/actions'\n\n// Body container Component =>\nconst SearchBodyContainer = () => {\n\n    const dispatch = useDispatch();\n    const cardList = useSelector(state => state.searchData);\n\n    // get last Page of search and url from the store ==>\n    const { last_page = '', url } = useSelector(state => state.debugData ? state.debugData : {});\n    const page = useSelector(state => state.page ? state.page : 1);\n\n    // function to add more cards on clicking view more if not the last page ===>\n    const addMoreCards = () => {\n        if (page !== last_page)\n            dispatch(setPageNo(Number(page) + 1))\n        dispatch(getSearchData({ oldUrl: url }))\n\n    }\n    return (\n        <Fragment>\n            {cardList && cardList.length > 0 &&\n                <Fragment><div className='cards'>\n                    <CardContainer cardList={cardList} />\n                </div>\n\n                {/* show view more button only when not the last page of the list ==> */}\n                    {page !== last_page && <Button onClickHandler={addMoreCards} customClass={'transWhite'} label='View More' />\n                    }\n                </Fragment>\n            }\n        </Fragment>\n    )\n}\nexport default SearchBodyContainer;","import React from 'react'\nimport './AnimeSearchContainer.css'\nimport SearchBarContainer from '../SearchContainer/SearchBarContainer'\nimport SearchBodyContainer from '../SearchBody/SearchBodyContainer'\n\n// Container component that containes Search bar and Body==>\n\n// kept body container within searchBar calls so that it stays intct in that width==>\n\nconst AnimeSearchContainer = () => {\n\n    return (\n        <div className='container'>\n            <div className='searchBar'>\n                <SearchBarContainer />\n                <SearchBodyContainer />\n            </div>\n        </div>\n    )\n}\nexport default AnimeSearchContainer;","import React from 'react';\nimport './App.css';\nimport AnimeSearchContainer from './components/AnimeSearchContainer/AnimeSearchContainer';\n\n// Root Component ===>\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AnimeSearchContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState = {\n    page: 1,\n}\n// Root Reducer for the application ==>\nconst rootReducer = (state = initState, action) => {\n    const { type, payload } = action;\n    switch (type) {\n        case 'SET_SEARCH_RESULT_DATA':\n            return { ...state, searchData: payload };\n        case 'SET_SEARCH_DEBUG_DATA':\n            return { ...state, debugData: payload };\n        case 'SET_SEARCH_PAGE':\n            return { ...state, page: payload };\n        default:\n            return state;\n    }\n}\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers/rootReducer';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <Provider store={store} >\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}